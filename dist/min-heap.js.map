{"mappings":"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","sources":["min-heap.js"],"sourcesContent":["/**\n * Creates a HeapNode object for use in the MinHeap class.\n * The purpose of HeapNode is to establish some consistency across different\n * potential data types you'd use with MinHeap.\n */\nclass HeapNode {\n  /**\n   * Instantiates a HeapNode with a value property equal to the value passed.\n   * @param {*} value\n   */\n  constructor(value) {\n    this.value = value;\n  }\n}\n\n/**\n * Creates a min heap data structure\n * Public methods are insert(), pull(), and peek().\n */\nclass MinHeap {\n  #list = [];\n\n  /**\n   * Compares two nodes. Can be overridden with a custom function passed to the\n   * class constructor.\n   *\n   * @param {HeapNode} n1 - a node to compare\n   * @param {HeapNode} n2 - a node to compare\n   * @returns Returns true if n2's value is greater than n1's; false otherwise.\n   */\n  #compare = (n1, n2) => {\n    if (!n1 instanceof HeapNode || !n2 instanceof HeapNode) {\n      throw \"Comparison argument must be an instance of HeapNode.\";\n    }\n    return n2.value > n1.value;\n  };\n\n  /**\n   * Instantiates a MinHeap.\n   *\n   * @param {Function} compareFunction - optional custom comparison function.\n   * See the #compare member for implementation details.\n   */\n  constructor(compareFunction) {\n    if (compareFunction && typeof compareFunction === \"function\") {\n      this.#compare = compareFunction;\n    }\n  }\n\n  /**\n   * Gets the parent node's index.\n   *\n   * @param {Number} i - index of the node whose parent you want.\n   * @returns the index of the parent node.\n   */\n  #parent(i) {\n    return Math.floor((i - 1) * 0.5);\n  }\n\n  /**\n   * Gets the index of the node's left child.\n   *\n   * @param {Number} i - index of the node whose left child you want.\n   * @returns the index of the node's left child.\n   */\n  #leftChild(i) {\n    const childIndex = i * 2 + 1;\n    return this.#list[childIndex] && childIndex;\n  }\n\n  /**\n   * Gets the index of the node's right child.\n   *\n   * @param {Number} i - index of the node whose right child you want.\n   * @returns the index of the node's right child.\n   */\n  #rightChild(i) {\n    const childIndex = i * 2 + 2;\n    return this.#list[childIndex] && childIndex;\n  }\n\n  /**\n   * Bubbles a node up the heap to its proper position, to maintain the min heap\n   * strutcure.\n   *\n   * @param {Number} i - index of the node to bubble up.\n   */\n  #heapifyUp(i) {\n    if (this.#list.length < 2) return;\n\n    while (this.#parent(i) >= 0) {\n      const iParent = this.#parent(i);\n\n      // Get references to the nodes themselves\n      let node = this.#list[i];\n      let parentNode = this.#list[iParent];\n\n      // Exit early if the node at i is greater than the parent node\n      if (this.#compare(parentNode, node)) break;\n\n      // Swap the nodes and set them:\n      [parentNode, node] = [node, parentNode];\n      this.#list[iParent] = parentNode;\n      this.#list[i] = node;\n\n      i = iParent;\n    }\n  }\n\n  /**\n   * Moves a node down the heap to its proper position, to maintain the min heap\n   * strutcure.\n   *\n   * @param {Number} i - index of the node to move down.\n   */\n  #heapifyDown(i) {\n    if (this.#list.length < 2) return;\n\n    while (this.#leftChild(i)) {\n      // Get the child indeces, and find the smaller of the two nodes\n      const iChildL = this.#leftChild(i);\n      const iChildR = this.#rightChild(i);\n      let iSmallestChild =\n        iChildR && this.#compare(this.#list[iChildR], this.#list[iChildL])\n          ? iChildR\n          : iChildL;\n\n      // Get references to the nodes themselves\n      let node = this.#list[i];\n      let childNode = this.#list[iSmallestChild];\n\n      // Exit early if the child is greater than the node at i\n      if (this.#compare(node, childNode)) break;\n\n      // Swap the nodes and set them\n      [node, childNode] = [childNode, node];\n      this.#list[i] = node;\n      this.#list[iSmallestChild] = childNode;\n\n      i = iSmallestChild;\n    }\n  }\n\n  /**\n   * Peek the root node.\n   *\n   * @returns the root node's value property.\n   */\n  peek() {\n    return this.#list[0].value;\n  }\n\n  /**\n   * Removes and returns the root node. Readjusts the heap to maintain its\n   * required structure.\n   *\n   * @returns the root node's value property.\n   */\n  pull() {\n    if (this.#list.length === 0) return;\n\n    const firstNode = this.#list[0];\n    this.#list[0] = this.#list.pop();\n    this.#heapifyDown(0);\n    return firstNode.value;\n  }\n\n  /**\n   * Inserts a HeapNode instance.\n   *\n   * @param {*} value - The value of the node to insert.\n   * @returns the value passed.\n   */\n  insert(value) {\n    const length = this.#list.push(new HeapNode(value));\n    this.#heapifyUp(length - 1);\n    return value;\n  }\n\n  /**\n   * Gets the heap array. Useful for debugging/logging.\n   *\n   * @returns the heap array.\n   */\n  getList() {\n    return this.#list;\n  }\n\n  /**\n   * Checks if the heap is empty.\n   *\n   * @returns true if empty, false otherwise.\n   */\n  isEmpty() {\n    return this.#list.length === 0;\n  }\n}\n\nexport default MinHeap;\n"],"names":[],"version":3,"file":"min-heap.js.map"}
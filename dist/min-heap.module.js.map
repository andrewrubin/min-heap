{"version":3,"file":"min-heap.module.js","sources":["../index.js"],"sourcesContent":["/**\n * Creates a HeapNode object for use in the MinHeap class.\n * The purpose of HeapNode is to establish some consistency across different\n * potential data types you'd use with MinHeap.\n */\nclass HeapNode {\n  /**\n   * Instantiates a HeapNode with a value property equal to the value passed.\n   * @param {*} value\n   */\n  constructor(value) {\n    this.value = value;\n  }\n}\n\n/**\n * Creates a min heap data structure\n * Public methods are insert(), pull(), and peek().\n */\nclass MinHeap {\n  #list = [];\n\n  /**\n   * Compares two nodes. Can be overridden with a custom function passed to the\n   * class constructor.\n   *\n   * @param {HeapNode} n1 - a node to compare\n   * @param {HeapNode} n2 - a node to compare\n   * @returns Returns true if n2's value is greater than n1's; false otherwise.\n   */\n  #compare = (n1, n2) => {\n    if (!n1 instanceof HeapNode || !n2 instanceof HeapNode) {\n      throw \"Comparison argument must be an instance of HeapNode.\";\n    }\n    return n2.value > n1.value;\n  };\n\n  /**\n   * Instantiates a MinHeap.\n   *\n   * @param {Function} compareFunction - optional custom comparison function.\n   * See the #compare member for implementation details.\n   */\n  constructor(compareFunction) {\n    if (compareFunction && typeof compareFunction === \"function\") {\n      this.#compare = compareFunction;\n    }\n  }\n\n  /**\n   * Gets the parent node's index.\n   *\n   * @param {Number} i index of the node whose parent you want.\n   * @returns the index of the parent node.\n   */\n  #parent(i) {\n    return Math.floor((i - 1) * 0.5);\n  }\n\n  /**\n   * Gets the index of the node's left child.\n   *\n   * @param {Number} i index of the node whose left child you want.\n   * @returns the index of the node's left child.\n   */\n  #leftChild(i) {\n    const childIndex = i * 2 + 1;\n    return this.#list[childIndex] && childIndex;\n  }\n\n  /**\n   * Gets the index of the node's right child.\n   *\n   * @param {Number} i index of the node whose right child you want.\n   * @returns the index of the node's right child.\n   */\n  #rightChild(i) {\n    const childIndex = i * 2 + 2;\n    return this.#list[childIndex] && childIndex;\n  }\n\n  /**\n   * Bubbles a node up the heap to its proper position, to maintain the min heap\n   * strutcure.\n   *\n   * @param {Number} i index of the node to bubble up.\n   */\n  #heapifyUp(i) {\n    if (this.#list.length < 2) return;\n\n    while (this.#parent(i) >= 0) {\n      const iParent = this.#parent(i);\n\n      // Get references to the nodes themselves\n      let node = this.#list[i];\n      let parentNode = this.#list[iParent];\n\n      // Exit early if the node at i is greater than the parent node\n      if (this.#compare(parentNode, node)) break;\n\n      // Swap the nodes and set them:\n      [parentNode, node] = [node, parentNode];\n      this.#list[iParent] = parentNode;\n      this.#list[i] = node;\n\n      i = iParent;\n    }\n  }\n\n  /**\n   * Moves a node down the heap to its proper position, to maintain the min heap\n   * strutcure.\n   *\n   * @param {Number} i index of the node to move down.\n   */\n  #heapifyDown(i) {\n    if (this.#list.length < 2) return;\n\n    while (this.#leftChild(i)) {\n      // Get the child indeces, and find the smaller of the two nodes\n      const iChildL = this.#leftChild(i);\n      const iChildR = this.#rightChild(i);\n      let iSmallestChild =\n        iChildR && this.#compare(this.#list[iChildR], this.#list[iChildL])\n          ? iChildR\n          : iChildL;\n\n      // Get references to the nodes themselves\n      let node = this.#list[i];\n      let childNode = this.#list[iSmallestChild];\n\n      // Exit early if the child is greater than the node at i\n      if (this.#compare(node, childNode)) break;\n\n      // Swap the nodes and set them\n      [node, childNode] = [childNode, node];\n      this.#list[i] = node;\n      this.#list[iSmallestChild] = childNode;\n\n      i = iSmallestChild;\n    }\n  }\n\n  /**\n   * Peek the root node.\n   *\n   * @returns the root node's value property.\n   */\n  peek() {\n    return this.#list[0].value;\n  }\n\n  /**\n   * Removes and returns the root node. Readjusts the heap to maintain its\n   * required structure.\n   *\n   * @returns the root node's value property.\n   */\n  pull() {\n    if (this.#list.length === 0) return;\n\n    const firstNode = this.#list[0];\n    const poppedNode = this.#list.pop();\n\n    if (this.#list.length !== 0) {\n      this.#list[0] = poppedNode;\n      this.#heapifyDown(0);\n    }\n\n    return firstNode.value;\n  }\n\n  /**\n   * Inserts a HeapNode instance.\n   *\n   * @param {*} value - The value of the node to insert.\n   * @returns the value passed.\n   */\n  insert(value) {\n    const length = this.#list.push(new HeapNode(value));\n    this.#heapifyUp(length - 1);\n    return value;\n  }\n\n  /**\n   * Gets the heap array. Useful for debugging/logging.\n   *\n   * @returns the heap array.\n   */\n  getList() {\n    return this.#list;\n  }\n\n  /**\n   * Checks if the heap is empty.\n   *\n   * @returns true if empty, false otherwise.\n   */\n  isEmpty() {\n    return this.#list.length === 0;\n  }\n}\n\nexport default MinHeap;\n"],"names":["HeapNode","value","this","_list","_classPrivateFieldLooseKey","_compare","_parent","_leftChild","_rightChild","_heapifyUp","_heapifyDown","MinHeap","compareFunction","Object","defineProperty","_heapifyDown2","_heapifyUp2","_rightChild2","_leftChild2","_parent2","writable","n1","n2","_classPrivateFieldLooseBase","_proto","prototype","peek","pull","length","firstNode","poppedNode","pop","insert","push","getList","isEmpty","i","Math","floor","childIndex","iParent","node","parentNode","_ref","iChildL","iChildR","iSmallestChild","childNode","_ref2"],"mappings":"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"}